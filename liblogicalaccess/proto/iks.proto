syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.islog.iks.grpc";

// The IKSF service, exposed to remote client.
// This API is used by LibLogicalAccess to provide
// server side cryptography.
service IKSService {
    // Request random data from the server.
    rpc GenRandom (CMSG_GenRandom) returns (SMSG_GenRandom) {
    }

    // Generic AES Encryption routine.
    // No padding management.
    rpc AESEncrypt (CMSG_AESOperation) returns (SMSG_AESResult) {
    }

    // Generic AES Decryption routine.
    // No padding management.
    rpc AESDecrypt (CMSG_AESOperation) returns (SMSG_AESResult) {
    }

    // Desfire ISO Authentication -- Step 1
    rpc DESFireISOAuth1 (CMSG_DesfireISOAuth_Step1) returns (SMSG_DesfireISOAuth_Step1) {
    }

    // Desfire ISO Authentication -- Step 2
    rpc DESFireISOAuth2 (CMSG_DesfireAuth_Step2) returns (SMSG_DesfireAuth_Step2) {
    }

    // Desfire AES Authentication -- Step 1
    rpc DESFireAESAuth1 (CMSG_DesfireAESAuth_Step1) returns (SMSG_DesfireAESAuth_Step1) {
    }

    // Desfire AES Authentication -- Step 2
    rpc DESFireAESAuth2 (CMSG_DesfireAuth_Step2) returns (SMSG_DesfireAuth_Step2) {
    }

    // Generate DESFire change-key cryptogram where both keys
    // are stored by IKS.
    // This call is forward to IKSD which perform the cryptogram generation.
    rpc DESFireChangeKey (CMSG_DesfireChangeKey) returns (SMSG_DesfireChangeKey) {
    }
}

message KeyDiversificationInfo {
    enum Type {
        NONE = 0;
        //AV1 = 1;
        AV2 = 2;
    }
    Type div_type = 1;
    bytes div_input = 2;
}

// The description of a signature generated by IKS.
// The cryptographic signature to compute to verify a signature must be
// computed over the binary representation of this message.
message SignatureDescription {
    // The original source byte that the client wanted sign (decrypted by IKS).
    bytes payload = 1;

    // The nonce used when computing the signature
    uint64 nonce = 2;

    // The "run uuid" of IKS when the signature was computed
    bytes run_uuid = 3;

    // The timestamp when the signature was computed.
    uint64 timestamp = 4;
}

// Message that describes a request for desfire-change-key cryptogram
// generation.
// This message is used both by client <--> IKSF and IKSF <--> IKSD
// communication. Therefore, the old_key_bytes and new_key_bytes MUST NOT
// be used by a normal client.
//
// old_key_bytes and new_key_bytes are here to allow IKSD to compute the
// cryptogram when a volatile (IKSF-backed) key is used.
message CMSG_DesfireChangeKey {
    string old_key_uuid = 1;

    // The raw bytes of the old key.
    // THIS IS RESERVED FOR IKFS. DO NOT USE AS A NORMAL IKS CLIENT.
    bytes old_key_bytes = 2;

    string new_key_uuid = 3;

    // The raw bytes for the new key.
    // THIS IS RESERVED FOR IKFS. DO NOT USE AS A NORMAL IKS CLIENT.
    bytes new_key_bytes = 4;

    // Are we changing the key we are authenticated with ?
    bool change_same_key = 5;

    // The uuid of the session key ...
    string session_key_uuid = 6;
    // ... or the session key bytes
    bytes session_key = 7;

    KeyDiversificationInfo old_key_div = 8;
    KeyDiversificationInfo new_key_div = 9;

    // Really a 8bits number.
    int32 key_number = 10;

    // The IV to use for the operation.
    bytes iv = 11;
}

message SMSG_DesfireChangeKey {
    bytes cryptogram = 1;
}

// Request random data from the server.
message CMSG_GenRandom {
    // How many bytes of random data we want
    int32 size = 1;
}

// Response to CMSG_GenRandom
message SMSG_GenRandom {
    bytes randomBytes = 1;
}

// Generic AES encrypt/decrypt operation data.
message CMSG_AESOperation {
    string key_uuid = 1;
    //  string key_name = 2;
    bytes payload = 3;
    bytes iv = 4;

    // We would like the server to sign our decrypted payload.
    bool request_signature = 5;

    KeyDiversificationInfo diversification = 6;
}

// Generic AES Operation result.
message SMSG_AESResult {
    bytes payload = 1;

    // Description of the signature.
    SignatureDescription signatureDescription = 2;

    // IKS signature, computed over the binary representation of SignatureDescription.
    bytes signature = 3;

}

// AES Only DesfireAESAuthentication Step 1 message.
message CMSG_DesfireAESAuth_Step1 {
    string key_uuid = 1;

    // 16 bytes.
    bytes encrypted_random_picc = 2;

    KeyDiversificationInfo diversification = 3;
}

// Response message for Desfire AES Authentication Step 1.
message SMSG_DesfireAESAuth_Step1 {
    bool success = 1;

    // 32 bytes.
    bytes encrypted_cryptogram = 3;

    bytes auth_context_id = 4;
}

// AES Only DesfireISOAuthentication Step 1 message.
message CMSG_DesfireISOAuth_Step1 {
    string key_uuid = 1;

    // 16 bytes.
    bytes random_picc = 2;

    KeyDiversificationInfo diversification = 3;
}

// Response message for Desfire ISO Authentication Step 1.
message SMSG_DesfireISOAuth_Step1 {
    bool success = 1;

    // 16 bytes
    bytes random2 = 2;

    // 32 bytes.
    bytes encrypted_cryptogram = 3;

    // Context id to match Step1/Step2 authentication.
    // The client must send this id as part of Step2 message
    // so the server can retrieve context.
    bytes auth_context_id = 4;
}

// AES Only DesfireISOAuthentication Step 2 message.
message CMSG_DesfireAuth_Step2 {
    string key_uuid = 1;

    // 32 bytes ?
    bytes picc_cryptogram = 2;

    // The auth context id as received from the server in Step1 response.
    // This is needed so server can match context.
    bytes auth_context_id = 3;

    KeyDiversificationInfo diversification = 4;
}

// Response message for Desfire Authentication Step 2.
// Either session_key contains the session key material
// or session_key_ref contains the uuid of an IKS key that
// references the derived session-key.
message SMSG_DesfireAuth_Step2 {
    bool success = 1;
    bytes session_key = 2;
    string session_key_ref = 3;
}
